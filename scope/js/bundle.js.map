{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/events/events.js","scope-src/BackgroundView.js","scope-src/ChannelView.js","scope-src/ControlView.js","scope-src/Model.js","scope-src/SliderView.js","scope-src/View.js","scope-src/main.js","scope-src/scope-browser.js"],"names":[],"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","'use strict';\nvar View = require('./View');\n\nclass BackgroundView extends View{\n\n\tconstructor(className, models){\n\t\tsuper(className, models);\n\t\tvar saveCanvas =  document.getElementById('saveCanvas');\n\t\tthis.canvas = document.getElementById('scopeBG');\n\t\tsaveCanvas.addEventListener('click', () => {\n\t\t\tthis.canvas.getContext('2d').drawImage(document.getElementById('scope'), 0, 0);\n\t\t\tsaveCanvas.href = this.canvas.toDataURL();\n\t\t\tthis.repaintBG();\n\t\t});\n\t}\n\t\n\trepaintBG(xTime, data){\n\t\tvar canvas = this.canvas;\n\t\tcanvas.width = window.innerWidth;\n\t\tcanvas.height = window.innerHeight;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tctx.rect(0, 0, canvas.width, canvas.height);\n\t\tctx.fillStyle=\"white\";\n\t\tctx.fill();\n\t\t//ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\t\n\t\tif (data.plotMode == 1){\n\t\t\tthis.FFTBG(canvas, ctx, data);\n\t\t\treturn;\n\t\t}\n\n\t\tvar xPixels = xTime*this.models[0].getKey('sampleRate')/1000;\n\t\tvar numVLines = Math.floor(canvas.width/xPixels);\n\t\tvar mspersample = xTime*data.downSampling/data.upSampling;\n\t\t\n\t\t//console.log(xTime);\n\n\t\t//faint lines\n\t\tctx.strokeStyle = '#000000';\n\t\tctx.fillStyle=\"grey\";\n\t\tctx.font = \"14px inconsolata\";\n\t\tctx.textAlign = \"center\";\n\t\tctx.lineWidth = 0.2;\n\t\tctx.setLineDash([]);\n\t\tctx.beginPath();\n\t\tctx.fillText(0, canvas.width/2, canvas.height/2+11);\n\t\tfor (var i=1; i<numVLines; i++){\n\t\t\tctx.moveTo(canvas.width/2 + i*xPixels, 0);\n\t\t\tctx.lineTo(canvas.width/2 + i*xPixels, canvas.height);\n\t\t\tctx.fillText((i*mspersample).toPrecision(2), canvas.width/2 + i*xPixels, canvas.height/2+11);\n\t\t\tctx.moveTo(canvas.width/2 - i*xPixels, 0);\n\t\t\tctx.lineTo(canvas.width/2 - i*xPixels, canvas.height);\n\t\t\tctx.fillText((-i*mspersample).toPrecision(2), canvas.width/2 - i*xPixels, canvas.height/2+11);\n\t\t}\n\t\t\n\t\tvar numHLines = 6;\n\t\tfor (var i=1; i<numHLines; i++){\n\t\t\tif (i != numHLines/2){\n\t\t\t\tctx.moveTo(0, canvas.height*i/numHLines);\n\t\t\t\tctx.lineTo(canvas.width, canvas.height*i/numHLines);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//ticks\n\t\tvar numTicks = 10;\n\t\tvar tickSize;\n\t\tfor (var i=0; i<numVLines; i++){\n\t\t\tfor (var j=1; j<numTicks; j++){\n\t\t\t\ttickSize = 7;\n\t\t\t\tif (j === Math.floor(numTicks/2)){\n\t\t\t\t\ttickSize = 10;\n\t\t\t\t}\n\t\t\t\tctx.moveTo(canvas.width/2 + i*xPixels + xPixels*j/numTicks, canvas.height/2 + tickSize);\n\t\t\t\tctx.lineTo(canvas.width/2 + i*xPixels + xPixels*j/numTicks, canvas.height/2 - tickSize);\n\t\t\t\tif (i){\n\t\t\t\t\tctx.moveTo(canvas.width/2 - i*xPixels + xPixels*j/numTicks, canvas.height/2 + tickSize);\n\t\t\t\t\tctx.lineTo(canvas.width/2 - i*xPixels + xPixels*j/numTicks, canvas.height/2 - tickSize);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\n\t\tnumTicks = 10;\n\t\tfor (var i=0; i<numHLines; i++){\n\t\t\tfor (var j=1; j<numTicks; j++){\n\t\t\t\ttickSize = 7;\n\t\t\t\tif (j === Math.floor(numTicks/2)){\n\t\t\t\t\ttickSize = 10;\n\t\t\t\t}\n\t\t\t\tctx.moveTo(canvas.width/2 - tickSize, canvas.height*i/numHLines + canvas.height*j/(numTicks*numHLines));\n\t\t\t\tctx.lineTo(canvas.width/2 + tickSize, canvas.height*i/numHLines + canvas.height*j/(numTicks*numHLines));\n\t\t\t}\n\t\t}\t\n\t\tctx.stroke();\n\t\t\n\t\t//dashed lines\n\t\tctx.beginPath();\n\t\tctx.setLineDash([2, 5]);\n\t\t\n\t\tctx.moveTo(0, canvas.height*3/4);\n\t\tctx.lineTo(canvas.width, canvas.height*3/4);\n\t\tctx.moveTo(0, canvas.height*1/4);\n\t\tctx.lineTo(canvas.width, canvas.height*1/4);\n\t\t\n\t\tctx.stroke();\t\n\t\tctx.setLineDash([]);\t\n\t\t\n\t\t//fat lines\n\t\tctx.lineWidth = 1;\n\t\tctx.beginPath();\n\t\tvar numVLines = 2;\n\t\tfor (var i=0; i<=numVLines; i++){\n\t\t\tctx.moveTo(canvas.width*i/numVLines, 0);\n\t\t\tctx.lineTo(canvas.width*i/numVLines, canvas.height);\n\t\t}\n\t\t\n\t\tvar numHLines = 2;\n\t\tfor (var i=0; i<=numHLines; i++){\n\t\t\tctx.moveTo(0, canvas.height*i/numHLines);\n\t\t\tctx.lineTo(canvas.width, canvas.height*i/numHLines);\n\t\t}\n\t\t\n\t\tctx.stroke();\n\t\t\n\t\t//trigger line\n\t\t/*ctx.strokeStyle = '#0000ff';\n\t\tctx.lineWidth = 0.2;\n\t\tctx.beginPath();\n\t\tctx.moveTo(0, (canvas.height/2)*(1-(this.yOffset+this.triggerLevel)/this.yAmplitude) );\n\t\tctx.lineTo(canvas.width, (canvas.height/2)*(1-(this.yOffset+this.triggerLevel)/this.yAmplitude) );\n\t\tctx.stroke();*/\n\t}\n\t\n\tFFTBG(canvas, ctx, data){\n\t\t\n\t\tvar numVlines = 10;\n\t\t\n\t\t//faint lines\n\t\tctx.strokeStyle = '#000000';\n\t\tctx.fillStyle=\"grey\";\n\t\tctx.font = \"14px inconsolata\";\n\t\tctx.textAlign = \"center\";\n\t\tctx.lineWidth = 0.3;\n\t\tctx.setLineDash([]);\n\t\tctx.beginPath();\n\t\t\t\t\n\t\tfor (var i=0; i <= numVlines; i++){\n\t\t\tctx.moveTo(i*window.innerWidth/numVlines, 0);\n\t\t\tctx.lineTo(i*window.innerWidth/numVlines, canvas.height);\n\t\t\tif (i && i !== numVlines){\n\t\t\t\tvar val;\n\t\t\t\tif (parseInt(this.models[0].getKey('FFTXAxis')) === 0){\t// linear x axis\n\t\t\t\t\tval = ((i*this.models[0].getKey('sampleRate')/(numVlines*2))*data.upSampling/data.downSampling).toFixed(0);\n\t\t\t\t\t//console.log(val);\n\t\t\t\t} else {\n\t\t\t\t\tval = (Math.pow(Math.E, -(Math.log(1/window.innerWidth))*i/numVlines) * (this.models[0].getKey('sampleRate')/(2*window.innerWidth)) * (data.upSampling/data.downSampling)).toFixed(0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.fillText(val, i*window.innerWidth/numVlines, canvas.height-2);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar numHLines = 6;\n\t\tfor (var i=1; i<numHLines; i++){\n\t\t\tctx.moveTo(0, canvas.height*i/numHLines);\n\t\t\tctx.lineTo(canvas.width, canvas.height*i/numHLines);\n\t\t}\n\t\t\n\t\tctx.stroke();\n\t\t\n\t\t//fat lines\n\t\tctx.lineWidth = 1;\n\t\tctx.beginPath();\n\n\t\tctx.moveTo(0, 0);\n\t\tctx.lineTo(0, canvas.height);\n\n\t\tctx.moveTo(0, canvas.height);\n\t\tctx.lineTo(canvas.width, canvas.height);\n\t\t\t\n\t\tctx.stroke();\n\t}\n\t\n\t__xTimeBase(value, data){\n\t\t//console.log(value);\n\t\tthis.repaintBG(value, data);\n\t}\n\t\n\t_plotMode(value, data){\n\t\tthis.repaintBG(data.xTimeBase, data);\n\t}\n\t_FFTXAxis(value, data){\n\t\tthis.repaintBG(data.xTimeBase, data);\n\t}\n\t\n\t_upSampling(value, data){\n\t\tthis.repaintBG(data.xTimeBase, data);\n\t}\n\t_downSampling(value, data){\n\t\tthis.repaintBG(data.xTimeBase, data);\n\t}\n\t\n\t_triggerLevel(value, data){\n\t\t//console.log(value, data);\n\t}\n\t\n}\n\nmodule.exports = BackgroundView;\n","'use strict';\nvar View = require('./View');\n\nfunction ChannelConfig(){\n\tthis.yAmplitude = 1;\n\tthis.yOffset = 0;\n\tthis.color = '#ff0000';\n}\n\nvar channelConfig = [new ChannelConfig()];\nvar colours = ['#ff0000', '#0000ff', '#00ff00', '#ffff00', '#00ffff', '#ff00ff'];\n\nvar tdGainVal = 1, tdOffsetVal = 0, tdGainMin = 0, tdGainMax = 10, tdOffsetMin = -5, tdOffsetMax = 5;\nvar FFTNGainVal = 1, FFTNOffsetVal = -0.005, FFTNGainMin = 0, FFTNGainMax = 10, FFTNOffsetMin = -1, FFTNOffsetMax = 1;\nvar FFTDGainVal = 70, FFTDOffsetVal = 69, FFTDGainMin = 0, FFTDGainMax = 1000, FFTDOffsetMin = 0, FFTDOffsetMax = 100;\n\nclass ChannelView extends View{\n\n\tconstructor(className, models){\n\t\tsuper(className, models);\n\t}\n\t\n\t// UI events\n\tinputChanged($element, e){\n\t\tvar key = $element.data().key;\n\t\tvar channel = $element.data().channel;\n\t\tvar value = (key === 'color') ? $element.val() : parseFloat($element.val());\n\t\tif (!(key === 'color') && isNaN(value)) return;\n\t\tif (key === 'yAmplitude' && value == 0) value = 0.001; // prevent amplitude hitting zero\n\t\tthis.$elements.not($element).filterByData('key', key).filterByData('channel', channel).val(value);\n\t\tchannelConfig[channel][key] = value;\n\t\tthis.emit('channelConfig', channelConfig);\n\t}\n\t\n\tsetChannelGains(value, min, max){\n\t\tthis.$elements.filterByData('key', 'yAmplitude').not('input[type=number]').prop('min', min).prop('max', max);\n\t\tthis.$elements.filterByData('key', 'yAmplitude').val(value);\n\t\tfor (let item of channelConfig){\n\t\t\titem.yAmplitude = value;\n\t\t}\n\t\tthis.emit('channelConfig', channelConfig);\n\t\tconsole.log(value, this.$elements.filterByData('key', 'yAmplitude').val());\n\t}\n\tsetChannelOffsets(value, min, max){\n\t\tthis.$elements.filterByData('key', 'yOffset').not('input[type=number]').prop('min', min).prop('max', max);\n\t\tthis.$elements.filterByData('key', 'yOffset').val(value);\n\t\tfor (let item of channelConfig){\n\t\t\titem.yOffset = value;\n\t\t}\n\t\tthis.emit('channelConfig', channelConfig);\n\t}\n\t\n\tresetAll(){\n\t\tfor (let i=0; i<channelConfig.length; i++){\n\t\t\tthis.$elements.filterByData('key', 'yAmplitude').filterByData('channel', i).val(channelConfig[i].yAmplitude);\n\t\t\tthis.$elements.filterByData('key', 'yOffset').filterByData('channel', i).val(channelConfig[i].yOffset);\n\t\t}\n\t}\n\t\n\t_numChannels(val){\n\t\tvar numChannels = val;\n\t\tif (numChannels < channelConfig.length){\n\t\t\twhile(numChannels < channelConfig.length){\n\t\t\t\t$('#channelViewChannel'+(channelConfig.length)).remove();\n\t\t\t\tchannelConfig.pop();\n\t\t\t}\n\t\t} else if (numChannels > channelConfig.length){\n\t\t\twhile(numChannels > channelConfig.length){\n\t\t\t\tchannelConfig.push(new ChannelConfig());\n\t\t\t\tchannelConfig[channelConfig.length-1].color = colours[(channelConfig.length-1)%colours.length];\n\t\t\t\tvar el = $('#channelViewChannel0')\n\t\t\t\t\t.clone(true)\n\t\t\t\t\t.prop('id', 'channelViewChannel'+(channelConfig.length))\n\t\t\t\t\t.appendTo($('#channelColumn'));\n\t\t\t\tel.find('h1').html('Channel '+(channelConfig.length));\n\t\t\t\tel.find('input').each(function(){\n\t\t\t\t\t$(this).data('channel', channelConfig.length-1)\n\t\t\t\t});\n\t\t\t\tel.find('input[type=color]').val(colours[(channelConfig.length-1)%colours.length]);\n\t\t\t}\n\t\t}\n\t\tthis.emit('channelConfig', channelConfig);\n\t\tthis.$elements = $('.'+this.className);\n\t}\n\t\n\t_plotMode(val, data){\n\n\t\tif (val == 0){\t// time domain\n\t\t\n\t\t\tthis.setChannelGains(tdGainVal, tdGainMin, tdGainMax);\n\t\t\tthis.setChannelOffsets(tdOffsetVal, tdOffsetMin, tdOffsetMax);\n\t\t\t\t\n\t\t} else {\t// FFT\n\n\t\t\tif (data.FFTYAxis == 0){\t// normalised\n\n\t\t\t\tthis.setChannelGains(FFTNGainVal, FFTNGainMin, FFTNGainMax);\n\t\t\t\tthis.setChannelOffsets(FFTNOffsetVal, FFTNOffsetMin, FFTNOffsetMax);\n\n\t\t\t} else {\t// decibels\n\n\t\t\t\tthis.setChannelGains(FFTDGainVal, FFTDGainMin, FFTDGainMax);\n\t\t\t\tthis.setChannelOffsets(FFTDOffsetVal, FFTDOffsetMin, FFTDOffsetMax);\n\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\t_FFTYAxis(val, data){\n\n\t\tif (data.plotMode == 1){\n\t\t\n\t\t\tif (val == 0){\t// normalised\n\t\t\n\t\t\t\tthis.setChannelGains(FFTNGainVal, FFTNGainMin, FFTNGainMax);\n\t\t\t\tthis.setChannelOffsets(FFTNOffsetVal, FFTNOffsetMin, FFTNOffsetMax);\n\n\t\t\t} else {\t// decibels\n\n\t\t\t\tthis.setChannelGains(FFTDGainVal, FFTDGainMin, FFTDGainMax);\n\t\t\t\tthis.setChannelOffsets(FFTDOffsetVal, FFTDOffsetMin, FFTDOffsetMax);\n\t\t\t\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t}\n\t\n}\n\nmodule.exports = ChannelView;\n\n$.fn.filterByData = function(prop, val) {\n    return this.filter(\n        function() { return $(this).data(prop)==val; }\n    );\n}","'use strict';\nvar View = require('./View');\n\nvar xTime, sampleRate, upSampling, downSampling\n\nclass ControlView extends View{\n\n\tconstructor(className, models){\n\t\tsuper(className, models);\n\t\t$('#controlsButton').click(() => this.$parents.toggleClass('hidden') );\n\t}\n\t\n\t// UI events\n\tselectChanged($element, e){\n\t\tvar key = $element.data().key;\n\t\tvar value = $element.val();\n\t\t//if (this[key]) this[key](value);\n\t\tthis.emit('settings-event', key, parseFloat(value));\n\t\tthis.$elements.not($element).filterByData('key', key).val(value);\n\t}\n\tinputChanged($element, e){\n\t\tvar key = $element.data().key;\n\t\tvar value = $element.val();\n\t\tthis.emit('settings-event', key, parseFloat(value));\n\t\tthis.$elements.not($element).filterByData('key', key).val(value);\n\t}\n\tbuttonClicked($element, e){\n\t\tthis.emit('settings-event', $element.data().key);\n\t}\n\t\n\t// settings model events\n\tmodelChanged(data, changedKeys){\n\t\tfor (let key of changedKeys){\n\t\t\tif (key === 'upSampling' || key === 'downSampling' || key === 'xTimeBase'){\n\t\t\t\tthis['_'+key](data[key], data);\n\t\t\t} else {\n\t\t\t\tif (key === 'plotMode') this.plotMode(data[key], data);\n\t\t\t\t//this.$elements.filterByData('key', key).val(data[key]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tsetControls(data){\n\t\tfor (let key in data){\n\t\t\tthis.$elements.filterByData('key', key).val(data[key]);\n\t\t}\n\t}\n\t\n\tplotMode(val, data){\n\t\tthis.emit('plotMode', val, data);\n\t\tif (val == 0){\n\t\t\tif ($('#triggerControls').hasClass('hidden')) $('#triggerControls').removeClass('hidden');\n\t\t\tif (!$('#FFTControls').hasClass('hidden')) $('#FFTControls').addClass('hidden');\n\t\t\t$('.xAxisUnits').html('ms');\n\t\t\t$('.xUnit-display').html((xTime * downSampling/upSampling).toPrecision(2));\n\t\t\t$('#zoomUp').html('in');\n\t\t\t$('#zoomDown').html('out');\n\t\t} else if (val == 1){\n\t\t\tif (!$('#triggerControls').hasClass('hidden')) $('#triggerControls').addClass('hidden');\n\t\t\tif ($('#FFTControls').hasClass('hidden')) $('#FFTControls').removeClass('hidden');\n\t\t\t$('.xAxisUnits').html('Hz');\n\t\t\t$('.xUnit-display').html((sampleRate/20 * upSampling/downSampling));\n\t\t\t$('#zoomUp').html('out');\n\t\t\t$('#zoomDown').html('in');\n\t\t}\n\t}\n\t\n\t_upSampling(value, data){\n\t\tupSampling = value;\n\t\tif (data.plotMode == 0){\n\t\t\t$('.xUnit-display').html((data.xTimeBase * data.downSampling/data.upSampling).toPrecision(2));\n\t\t} else if (data.plotMode == 1){\n\t\t\t$('.xUnit-display').html((data.sampleRate/20 * data.upSampling/data.downSampling));\n\t\t}\n\t\t$('.zoom-display').html((100*data.upSampling/data.downSampling).toPrecision(4)+'%');\n\t}\n\t_downSampling(value, data){\n\t\tdownSampling = value;\n\t\tif (data.plotMode == 0){\n\t\t\t$('.xUnit-display').html((data.xTimeBase * data.downSampling/data.upSampling).toPrecision(2));\n\t\t} else if (data.plotMode == 1){\n\t\t\t$('.xUnit-display').html((data.sampleRate/20 * data.upSampling/data.downSampling));\n\t\t}\n\t\t$('.zoom-display').html((100*data.upSampling/data.downSampling).toPrecision(4)+'%');\n\t}\n\t_xTimeBase(value, data){\n\t\txTime = data.xTimeBase;\n\t\tsampleRate = data.sampleRate;\n\t\tif (data.plotMode == 0){\n\t\t\t$('.xUnit-display').html((data.xTimeBase * data.downSampling/data.upSampling).toPrecision(2));\n\t\t}\n\t}\n\t\n\t__numChannels(val, data){\n\t\tvar el = this.$elements.filterByData('key', 'triggerChannel');\n\t\tel.empty();\n\t\tfor (let i=0; i<val; i++){\n\t\t\tlet opt = $('<option></option>').html(i+1).val(i).appendTo(el);\n\t\t\tif (i === data.triggerChannel) opt.prop('selected', 'selected'); \n\t\t}\n\t}\n\t\n}\n\nmodule.exports = ControlView;\n\n$.fn.filterByData = function(prop, val) {\n    return this.filter(\n        function() { return $(this).data(prop)==val; }\n    );\n}","var EventEmitter = require('events').EventEmitter;\n\nclass Model extends EventEmitter{\n\n\tconstructor(data){\n\t\tsuper();\n\t\tvar _data = data || {};\n\t\tthis._getData = () => _data;\n\t}\n\t\n\tgetKey(key){\n\t\treturn this._getData()[key];\n\t}\n\t\n\tsetData(newData){\n\t\tif (!newData) return;\n\t\tvar newKeys = [];\n\t\tfor (let key in newData){\n\t\t\tif (!_equals(newData[key], this._getData()[key], false)){\n\t\t\t\tnewKeys.push(key);\n\t\t\t\tthis._getData()[key] = newData[key];\n\t\t\t}\n\t\t}\n\t\tif (newKeys.length) {\n\t\t\t//console.log('changed setdata');\n\t\t\tthis.emit('change', this._getData(), newKeys);\n\t\t}\n\t\tthis.emit('set', this._getData(), Object.keys(newData));\n\t}\n\t\n\tsetKey(key, value){\n\t\tif (!_equals(value, this._getData()[key], false)){\n\t\t\tthis._getData()[key] = value;\n\t\t\t//console.log('changed setkey');\n\t\t\tthis.emit('change', this._getData(), [key]);\n\t\t}\n\t\tthis.emit('set', this._getData(), [key]);\n\t}\n\t\n\tpushIntoKey(key, value){\n\t\tthis._getData()[key].push(value);\n\t\tthis.emit('change', this._getData(), [key]);\n\t\tthis.emit('set', this._getData(), [key]);\n\t}\n\t\n\tspliceFromKey(key, index){\n\t\tthis._getData()[key].splice(index, 1);\n\t\tthis.emit('change', this._getData(), [key]);\n\t\tthis.emit('set', this._getData(), [key]);\n\t}\n\t\n\tprint(){\n\t\tconsole.log(this._getData());\n\t}\n\t\n}\n\nmodule.exports = Model;\n\nfunction _equals(a, b, log){\n\tif (log) console.log('a:', a, 'b:', b);\n\tif (a instanceof Array && b instanceof Array){\n\t\tif (log) console.log('arrays', 'a:', a, 'b:', b, (a.length === b.length), a.every( function(element, index){ return _equals(element, b[index], log) }));\n\t\treturn ( (a.length === b.length) && a.every( function(element, index){ return _equals(element, b[index], log) }) );\n\t} else if (a instanceof Object && b instanceof Object){\n\t\tif (log) console.log('objects', 'a:', a, 'b:', b);\n\t\tfor (let c in a){ \n\t\t\tif (log) console.log('a[c]:', a[c], 'b[c]:', b[c], 'c:', c);\n\t\t\tif (!_equals(a[c], b[c], log)) return false;\n\t\t}\n\t\treturn true;\n\t} else {\n\t\tif (log) console.log('a:', a, 'b:', b, Object.is(a, b), (a === b));\n\t\treturn Object.is(a, b);\n\t}\n}\n\t\n\t\n\t\n\t\n\t\n\t\n\t","'use strict';\nvar View = require('./View');\n\nclass SliderView extends View{\n\t\n\tconstructor(className, models){\n\t\tsuper(className, models);\n\t\t\n\t\tthis.on('set-slider', args => {\n\t\t\t$('#scopeSlider'+args[0].value)\n\t\t\t\t.find('input[type=range]')\n\t\t\t\t\t.prop('min', args[1].value)\n\t\t\t\t\t.prop('max', args[2].value)\n\t\t\t\t\t.prop('step', args[3].value)\n\t\t\t\t\t.val(args[4].value)\n\t\t\t\t.siblings('input[type=number]')\n\t\t\t\t\t.prop('min', args[1].value)\n\t\t\t\t\t.prop('max', args[2].value)\n\t\t\t\t\t.prop('step', args[3].value)\n\t\t\t\t\t.val(args[4].value)\n\t\t\t\t.siblings('h1')\n\t\t\t\t\t.html((args[5].value == 'Slider') ? 'Slider '+args[0].value : args[5].value);\n\t\t\t\t\t\n\t\t\tvar inputs = $('#scopeSlider'+args[0].value).find('input[type=number]');\n\t\t\tinputs.filterByData('key', 'min').val(args[1].value);\n\t\t\tinputs.filterByData('key', 'max').val(args[2].value);\n\t\t\tinputs.filterByData('key', 'step').val(args[3].value);\n\t\t});\n\t\t\n\t}\n\t\n\tinputChanged($element, e){\n\t\t\n\t\tvar key = $element.data().key;\n\t\tvar slider = $element.data().slider;\n\t\tvar value = $element.val();\n\t\t\n\t\tif (key === 'value'){\n\t\t\tthis.emit('slider-value', parseInt(slider), parseFloat(value));\n\t\t} else {\n\t\t\t$element.closest('div.sliderView')\n\t\t\t\t.find('input[type=range]').prop(key, value)\n\t\t\t\t.siblings('input[type=number]').prop(key, value);\n\t\t}\n\n\t\t$element.siblings('input').val(value);\n\t}\n\t\n\t_numSliders(val){\n\n\t\tvar el = $('#scopeSlider0');\n\t\t\n\t\t$('#sliderColumn').empty();\n\t\t\n\t\tif (val == 0){\n\t\t\tel.appendTo($('#sliderColumn')).css('display', 'none');\n\t\t}\n\t\t\n\t\tfor (var i=0; i<val; i++){\n\t\t\tvar slider = el\n\t\t\t\t.clone(true)\n\t\t\t\t.prop('id', 'scopeSlider'+i)\n\t\t\t\t.appendTo($('#sliderColumn'))\n\t\t\t\t.css('display', 'block');\n\t\t\t\t\n\t\t\tslider.find('input')\n\t\t\t\t.data('slider', i)\n\t\t\t\t.on('input', (e) => this.inputChanged($(e.currentTarget), e));\n\t\t}\n\t\t\n\t}\n\t\n}\n\nmodule.exports = SliderView;\n\n$.fn.filterByData = function(prop, val) {\n    return this.filter(\n        function() { return $(this).data(prop)==val; }\n    );\n}","var EventEmitter = require('events').EventEmitter;\n\nclass View extends EventEmitter{\n\n\tconstructor(CSSClassName, models, settings){\n\t\tsuper();\n\t\tthis.className = CSSClassName;\n\t\tthis.models = models;\n\t\tthis.settings = settings;\n\t\tthis.$elements = $('.'+CSSClassName);\n\t\tthis.$parents = $('.'+CSSClassName+'-parent');\n\t\t\n\t\tif (models){\n\t\t\tfor (var i=0; i<models.length; i++){\n\t\t\t\tmodels[i].on('change', (data, changedKeys) => {\n\t\t\t\t\tthis.modelChanged(data, changedKeys);\n\t\t\t\t});\n\t\t\t\tmodels[i].on('set', (data, changedKeys) => {\n\t\t\t\t\tthis.modelSet(data, changedKeys);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.$elements.filter('select').on('change', (e) => this.selectChanged($(e.currentTarget), e));\n\t\tthis.$elements.filter('input').on('input', (e) => this.inputChanged($(e.currentTarget), e));\n\t\tthis.$elements.filter('button').on('click', (e) => this.buttonClicked($(e.currentTarget), e));\n\t\t\n\t}\n\t\n\tmodelChanged(data, changedKeys){\n\t\tfor (let value of changedKeys){\n\t\t\tif (this['_'+value]){\n\t\t\t\tthis['_'+value](data[value], data, changedKeys);\n\t\t\t}\n\t\t}\n\t}\n\tmodelSet(data, changedKeys){\n\t\tfor (let value of changedKeys){\n\t\t\tif (this['__'+value]){\n\t\t\t\tthis['__'+value](data[value], data, changedKeys);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tselectChanged(element, e){}\n\tbuttonClicked(element, e){}\n\t\n\tprintElements(){\n\t\tconsole.log('elements:', this.$elements, 'parents:', this.$parents);\n\t}\n\t\t\n}\n\nmodule.exports = View;","var scope = require('./scope-browser');","'use strict';\n\n// worker\nvar worker = new Worker(\"js/scope-worker.js\");\n\n// models\nvar Model = require('./Model');\nvar settings = new Model();\n\n// views\nvar controlView = new (require('./ControlView'))('scopeControls', [settings]);\nvar backgroundView = new (require('./BackgroundView'))('scopeBG', [settings]);\nvar channelView = new (require('./ChannelView'))('channelView', [settings]);\nvar sliderView = new (require('./SliderView'))('sliderView', [settings]);\n\n// main bela socket\nvar belaSocket = io('/IDE');\n\n// scope socket\nvar socket = io('/BelaScope');\n\nvar paused = false, oneShot = false;\n\n// view events\ncontrolView.on('settings-event', (key, value) => {\n\tif (key === 'scopePause'){\n\t\tif (paused){\n\t\t\tpaused = false;\n\t\t\t$('#pauseButton').html('pause');\n\t\t\t$('#scopeStatus').html('waiting');\n\t\t} else {\n\t\t\tpaused = true;\n\t\t\t$('#pauseButton').html('resume');\n\t\t\t$('#scopeStatus').removeClass('scope-status-triggered').addClass('scope-status-waiting').html('paused');\n\t\t}\n\t\treturn;\n\t} else if (key === 'scopeOneShot'){\n\t\toneShot = true;\n\t\tif (paused){\n\t\t\tpaused = false;\n\t\t\t$('#pauseButton').html('pause');\n\t\t}\n\t\t$('#scopeStatus').removeClass('scope-status-triggered').addClass('scope-status-waiting').html('waiting (one-shot)');\n\t}\n\tsocket.emit('settings-event', key, value);\n\t// console.log(key, value);\n\tif (value !== undefined) settings.setKey(key, value);\n});\n\nchannelView.on('channelConfig', (channelConfig) => {\n\tworker.postMessage({\n\t\tevent\t\t\t: 'channelConfig',\n\t\tchannelConfig\n\t});\n});\n\nsliderView.on('slider-value', (slider, value) => socket.emit('slider-value', slider, value) );\n\n// socket events\nsocket.on('settings', (newSettings) => {\n\t\n\tlet obj = {};\n\tfor (let key in newSettings){\n\t\tobj[key] = newSettings[key].value;\n\t}\n\t\n\tobj.frameWidth = window.innerWidth;\n\tobj.frameHeight = window.innerHeight;\n\t\n\t// console.log(newSettings, obj);\n\tsettings.setData(obj);\n\t\n\tcontrolView.setControls(obj);\n});\nsocket.on('scope-slider', args => sliderView.emit('set-slider', args) );\nsocket.on('dropped-count', count => {\n\t$('#droppedFrames').html(count);\n\tif (count > 10)\n\t\t$('#droppedFrames').css('color', 'red');\n\telse\n\t\t$('#droppedFrames').css('color', 'black');\n});\n\nbelaSocket.on('cpu-usage', CPU);\n\n// model events\nsettings.on('set', (data, changedKeys) => {\n\tif (changedKeys.indexOf('frameWidth') !== -1){\n\t\tvar xTimeBase = Math.max(Math.floor(1000*(data.frameWidth/8)/data.sampleRate), 1);\n\t\tsettings.setKey('xTimeBase', xTimeBase);\n\t\tsocket.emit('settings-event', 'frameWidth', data.frameWidth)\n\t} else {\n\t\tworker.postMessage({\n\t\t\tevent\t\t: 'settings',\n\t\t\tsettings\t: data\n\t\t});\n\t}\n});\n\n// window events\n$(window).on('resize', () => {\n\tsettings.setKey('frameWidth', window.innerWidth);\n\tsettings.setKey('frameHeight', window.innerHeight);\n});\n\n$('#scope').on('mousemove', e => {\n\tif (settings.getKey('plotMode') === undefined) return;\n\tvar plotMode = settings.getKey('plotMode');\n\tvar scale = settings.getKey('downSampling') / settings.getKey('upSampling');\n\tvar x, y;\n\tif (plotMode == 0){\n\t\tx = (1000*scale*(e.clientX-window.innerWidth/2)/settings.getKey('sampleRate')).toPrecision(4)+'ms';\n\t\ty = (1 - 2*e.clientY/window.innerHeight).toPrecision(3);\n\t} else if (plotMode == 1){\n\t\tif (parseInt(settings.getKey('FFTXAxis')) === 0){\n\t\t\tx = parseInt(settings.getKey('sampleRate')*e.clientX/(2*window.innerWidth*scale));\n\t\t} else {\n\t\t\tx = parseInt(Math.pow(Math.E, -(Math.log(1/window.innerWidth))*e.clientX/window.innerWidth) * (settings.getKey('sampleRate')/(2*window.innerWidth)) * (settings.getKey('upSampling')/(settings.getKey('downSampling'))));\n\t\t}\n\t\tif (x > 1500) x = (x/1000) + 'khz';\n\t\telse x += 'hz';\n\t\ty = (1 - e.clientY/window.innerHeight).toPrecision(3);\n\t}\n\t$('#scopeMouseX').html('x: '+x);\n\t$('#scopeMouseY').html('y: '+y);\n});\n\n// CPU usage\nfunction CPU(data){\n\tvar ide = (data.syntaxCheckProcess || 0) + (data.buildProcess || 0) + (data.node || 0);\n\tvar bela = 0, rootCPU = 1;\n\t\n\tif (data.bela != 0 && data.bela !== undefined){\n\t\n\t\t// extract the data from the output\n\t\tvar lines = data.bela.split('\\n');\n\t\tvar taskData = [], output = [];\n\t\tfor (var j=0; j<lines.length; j++){\n\t\t\ttaskData.push([]);\n\t\t\tlines[j] = lines[j].split(' ');\n\t\t\tfor (var k=0; k<lines[j].length; k++){\n\t\t\t\tif (lines[j][k]){\n\t\t\t\t\ttaskData[j].push(lines[j][k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tfor (var j=0; j<taskData.length; j++){\n\t\t\tif (taskData[j].length){\n\t\t\t\tvar proc = {\n\t\t\t\t\t'name'\t: taskData[j][7],\n\t\t\t\t\t'cpu'\t: taskData[j][6],\n\t\t\t\t\t'msw'\t: taskData[j][2],\n\t\t\t\t\t'csw'\t: taskData[j][3]\n\t\t\t\t};\n\t\t\t\tif (proc.name === 'ROOT') rootCPU = proc.cpu*0.01;\n\t\t\t\t// ignore uninteresting data\n\t\t\t\tif (proc && proc.name && proc.name !== 'ROOT' && proc.name !== 'NAME' && proc.name !== 'IRQ29:'){\n\t\t\t\t\toutput.push(proc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var j=0; j<output.length; j++){\n\t\t\tif (output[j].cpu){\n\t\t\t\tbela += parseFloat(output[j].cpu);\n\t\t\t}\n\t\t}\n\n\t\tbela += data.belaLinux * rootCPU;\t\n\n\t}\n\t\n\t$('#ide-cpu').html('ide: '+(ide*rootCPU).toFixed(1)+'%');\n\t$('#bela-cpu').html('bela: '+( bela ? bela.toFixed(1)+'%' : '--'));\n\t\n\tif (bela && (ide*rootCPU + bela) > 80){\n\t\t$('#ide-cpu, #bela-cpu').css('color', 'red');\n\t} else {\n\t\t$('#ide-cpu, #bela-cpu').css('color', 'black');\n\t}\n\t\n}\n\n// plotting\n{\n\t\n\tlet canvas = document.getElementById('scope');\n\tlet ctx = canvas.getContext('2d');\n\tctx.lineWidth = 2;\n\t\n\tlet width, height, numChannels, channelConfig = [], xOff = 0, triggerChannel = 0, triggerLevel = 0, xOffset = 0, upSampling = 1;;\n\tsettings.on('change', (data, changedKeys) => {\n\t\tif (changedKeys.indexOf('frameWidth') !== -1 || changedKeys.indexOf('frameHeight') !== -1){\n\t\t\tcanvas.width = window.innerWidth;\n\t\t\twidth = canvas.width;\n\t\t\tcanvas.height = window.innerHeight;\n\t\t\theight = canvas.height;\n\t\t}\n\t\tif (changedKeys.indexOf('numChannels') !== -1){\n\t\t\tnumChannels = data.numChannels;\n\t\t}\n\t\tif (changedKeys.indexOf('triggerChannel') !== -1){\n\t\t\ttriggerChannel = data.triggerChannel;\n\t\t}\n\t\tif (changedKeys.indexOf('triggerLevel') !== -1){\n\t\t\ttriggerLevel = data.triggerLevel;\n\t\t}\n\t\tif (changedKeys.indexOf('xOffset') !== -1){\n\t\t\txOffset = data.xOffset;\n\t\t}\n\t\tif (changedKeys.indexOf('upSampling') !== -1){\n\t\t\tupSampling = data.upSampling;\n\t\t}\n\t});\n\tchannelView.on('channelConfig', (config) => channelConfig = config );\n\t\n\tlet frame, length, plot = false;\n\n\tworker.onmessage = function(e) {\n\t\tframe = e.data;\n\t\tlength = Math.floor(frame.length/numChannels);\n\t\t// if scope is paused, don't set the plot flag\n\t\tplot = !paused;\n\t\t\n\t\t// interpolate the trigger sample to get the sub-pixel x-offset\n\t\tif (settings.getKey('plotMode') == 0){\n\t\t\tif (upSampling == 1){\n\t\t\t\tlet one = Math.abs(frame[Math.floor(triggerChannel*length+length/2)+xOffset-1] + (height/2) * ((channelConfig[triggerChannel].yOffset + triggerLevel)/channelConfig[triggerChannel].yAmplitude - 1));\n\t\t\t\tlet two = Math.abs(frame[Math.floor(triggerChannel*length+length/2)+xOffset] + (height/2) * ((channelConfig[triggerChannel].yOffset + triggerLevel)/channelConfig[triggerChannel].yAmplitude - 1));\n\t\t\t\txOff = (one/(one+two)-1.5);\n\t\t\t} else {\n\t\t\t\tfor (var i=0; i<=(upSampling*2); i++){\n\t\t\t\t\tlet one = frame[Math.floor(triggerChannel*length+length/2)+xOffset*upSampling-i] + (height/2) * ((channelConfig[triggerChannel].yOffset + triggerLevel)/channelConfig[triggerChannel].yAmplitude - 1);\n\t\t\t\t\tlet two = frame[Math.floor(triggerChannel*length+length/2)+xOffset*upSampling+i] + (height/2) * ((channelConfig[triggerChannel].yOffset + triggerLevel)/channelConfig[triggerChannel].yAmplitude - 1);\n\t\t\t\t\tif ((one > triggerLevel && two < triggerLevel) || (one < triggerLevel && two > triggerLevel)){\n\t\t\t\t\t\txOff = i*(Math.abs(one)/(Math.abs(one)+Math.abs(two))-1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(xOff);\n\t\t}\n\t};\n\t\n\tfunction plotLoop(){\n\t\trequestAnimationFrame(plotLoop);\n\t\t\n\t\tif (plot){\n\t\t\n\t\t\tplot = false;\n\t\t\tctx.clearRect(0, 0, width, height);\n\t\t\t//console.log('plotting');\n\t\t\t\n\t\t\tfor (var i=0; i<numChannels; i++){\n\n\t\t\t\tctx.strokeStyle = channelConfig[i].color;\n\t\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(0, frame[i * length] + xOff*(frame[i * length + 1] - frame[i * length]));\n\t\t\t\t\n\t\t\t\tfor (var j=1; (j-xOff)<(length); j++){\n\t\t\t\t\tctx.lineTo(j-xOff, frame[j+i*length]);\n\t\t\t\t}\n\t\t\t\t//ctx.lineTo(length, frame[length*(i+1)-1]);\n\t\t\t\t//if (!i) console.log(length, j-xOff-1);\n\n\t\t\t\tctx.stroke();\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttriggerStatus();\n\t\t\n\t\t} /*else {\n\t\t\tconsole.log('not plotting');\n\t\t}*/\n\t\t\n\t}\n\tplotLoop();\n\t\n\t// update the status indicator when triggered\n\tlet triggerTimeout; \n\tlet inactiveTimeout = setTimeout(() => {\n\t\tif (!oneShot && !paused) inactiveOverlay.addClass('inactive-overlay-visible');\n\t}, 5000);\n\tlet scopeStatus = $('#scopeStatus');\n\tlet inactiveOverlay = $('#inactive-overlay');\n\tfunction triggerStatus(){\n\t\n\t\tscopeStatus.removeClass('scope-status-waiting');\n\t\tinactiveOverlay.removeClass('inactive-overlay-visible');\n\t\t\t\n\t\t// hack to restart the fading animation if it is in progress\n\t\tif (scopeStatus.hasClass('scope-status-triggered')){\n\t\t\tscopeStatus.removeClass('scope-status-triggered');\n\t\t\tvoid scopeStatus[0].offsetWidth;\n\t\t}\n\t\t\n\t\tscopeStatus.addClass('scope-status-triggered').html('triggered');\n\t\t\n\t\tif (oneShot){\n\t\t\toneShot = false;\n\t\t\tpaused = true;\n\t\t\t$('#pauseButton').html('resume');\n\t\t\tscopeStatus.removeClass('scope-status-triggered').addClass('scope-status-waiting').html('paused');\n\t\t} else {\n\t\t\tif (triggerTimeout) clearTimeout(triggerTimeout);\n\t\t\ttriggerTimeout = setTimeout(() => {\n\t\t\t\tif (!oneShot && !paused) scopeStatus.removeClass('scope-status-triggered').addClass('scope-status-waiting').html('waiting');\n\t\t\t}, 1000);\n\t\t\t\n\t\t\tif (inactiveTimeout) clearTimeout(inactiveTimeout);\n\t\t\tinactiveTimeout = setTimeout(() => {\n\t\t\t\tif (!oneShot && !paused) inactiveOverlay.addClass('inactive-overlay-visible');\n\t\t\t}, 5000);\n\t\t}\n\t}\n\t\n\tlet saveCanvasData =  document.getElementById('saveCanvasData');\t\t\n\tsaveCanvasData.addEventListener('click', function(){\n\n\t\tlet downSampling = settings.getKey('downSampling');\n\t\tlet upSampling = settings.getKey('upSampling');\n\t\tlet sampleRate = settings.getKey('sampleRate');\n\t\tlet plotMode = settings.getKey('plotMode');\n\t\tlet scale = downSampling/upSampling;\n\t\tlet FFTAxis = settings.getKey('FFTXAxis');\n\t\t\n\t\tconsole.log(FFTAxis)\n\t\t\t\t\n\t\tlet out = \"data:text/csv;charset=utf-8,\";\n\t\t\n\t\tfor (let i=0; i<length; i++){\n\t\t\n\t\t\tif (plotMode === 0){\t\t// time domain\n\t\t\t\tout += scale*i/sampleRate;\n\t\t\t} else if (plotMode === 1) {\t// FFT\n\t\t\t\t\n\t\t\t\tif (parseInt(settings.getKey('FFTXAxis')) === 0){ // linear x-axis\n\t\t\t\t\tout += sampleRate*i/(2*length*scale);\n\t\t\t\t\t// x = parseInt(settings.getKey('sampleRate')*e.clientX/(2*window.innerWidth*scale));\n\t\t\t\t} else {\n\t\t\t\t\tout += Math.pow(Math.E, -(Math.log(1/length))*i/length) * sampleRate/(2*length) + upSampling/downSampling;\n\t\t\t\t\t// x = parseInt(Math.pow(Math.E, -(Math.log(1/window.innerWidth))*e.clientX/window.innerWidth) * (settings.getKey('sampleRate')/(2*window.innerWidth)) * (settings.getKey('upSampling')/(settings.getKey('downSampling'))));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (let j=0; j<numChannels; j++){\n\t\t\t\tout += ','+ ( ( 1 - frame[j*length + i] / (height/2) ) * channelConfig[j].yAmplitude - channelConfig[j].yOffset );\n\t\t\t}\n\t\t\tout += '\\n';\n\t\t}\n\n\n\t\tthis.href = encodeURI(out);\n\t});\n\t\n}\n\n\n\n\n\n\n\n\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}